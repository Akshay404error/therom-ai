#!/usr/bin/env python3
"""
Theorem AI Demo Script
This script demonstrates the Theorem AI project for demo purposes.
"""

import os
import subprocess
import sys
from pathlib import Path

def print_banner():
    """Print a nice banner for the demo."""
    print("=" * 60)
    print("           THEOREM AI - DEMO")
    print("=" * 60)
    print("Welcome to Theorem AI - The Next Generation Theorem Prover!")
    print()

def show_project_structure():
    """Show the main project structure."""
    print("üìÅ Project Structure:")
    print("‚îú‚îÄ‚îÄ src/                    # Source code")
    print("‚îÇ   ‚îú‚îÄ‚îÄ TheoremAI/          # Core Theorem AI library")
    print("‚îÇ   ‚îú‚îÄ‚îÄ Init/               # Initialization modules")
    print("‚îÇ   ‚îú‚îÄ‚îÄ Std/                # Standard library")
    print("‚îÇ   ‚îî‚îÄ‚îÄ lake/               # Build system")
    print("‚îú‚îÄ‚îÄ tests/                  # Test suite")
    print("‚îú‚îÄ‚îÄ doc/                    # Documentation")
    print("‚îî‚îÄ‚îÄ examples/               # Example code")
    print()

def show_key_features():
    """Show key features of Theorem AI."""
    print("üöÄ Key Features:")
    print("‚Ä¢ Advanced theorem proving capabilities")
    print("‚Ä¢ Functional programming language")
    print("‚Ä¢ Interactive proof assistant")
    print("‚Ä¢ Type-safe programming")
    print("‚Ä¢ Mathematical reasoning")
    print("‚Ä¢ Code generation")
    print()

def show_example_code():
    """Show some example Theorem AI code."""
    print("üíª Example Theorem AI Code:")
    print()
    
    example_code = '''
-- Theorem AI Example: Binary Search Trees
inductive Tree (Œ≤ : Type v) where
  | leaf
  | node (left : Tree Œ≤) (key : Nat) (value : Œ≤) (right : Tree Œ≤)

def Tree.contains (t : Tree Œ≤) (k : Nat) : Bool :=
  match t with
  | leaf => false
  | node left key value right =>
    if k < key then
      left.contains k
    else if key < k then
      right.contains k
    else
      true

-- Create and test a tree
#eval Tree.leaf.insert 2 "two"
      |>.insert 3 "three"
      |>.insert 1 "one"
'''
    
    print(example_code)

def check_theorem_ai_installation():
    """Check if Theorem AI is installed."""
    print("üîç Checking Theorem AI Installation:")
    try:
        # Try to run theorem-ai --version
        result = subprocess.run(['theorem-ai', '--version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ Theorem AI is installed!")
            print(f"   Version: {result.stdout.strip()}")
        else:
            print("‚ùå Theorem AI command not found")
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Theorem AI is not installed or not in PATH")
        print("   To install, follow the setup guide in the documentation")
    print()

def show_build_instructions():
    """Show build instructions."""
    print("üî® Building Theorem AI:")
    print("1. Install dependencies (CMake, C++ compiler)")
    print("2. Run: mkdir -p build/release")
    print("3. Run: cd build/release")
    print("4. Run: cmake ../../src")
    print("5. Run: make -j$(nproc)")
    print()

def show_usage_examples():
    """Show usage examples."""
    print("üìñ Usage Examples:")
    print("‚Ä¢ theorem-ai --help                    # Show help")
    print("‚Ä¢ theorem-ai file.theorem_ai           # Run a file")
    print("‚Ä¢ theorem-ai --interactive             # Start REPL")
    print("‚Ä¢ lake build                           # Build project")
    print("‚Ä¢ lake test                            # Run tests")
    print()

def main():
    """Main demo function."""
    print_banner()
    
    # Show different sections
    show_project_structure()
    show_key_features()
    show_example_code()
    check_theorem_ai_installation()
    show_build_instructions()
    show_usage_examples()
    
    print("=" * 60)
    print("üéâ Demo Complete!")
    print("Theorem AI is ready for mathematical reasoning and theorem proving!")
    print("=" * 60)

if __name__ == "__main__":
    main() 